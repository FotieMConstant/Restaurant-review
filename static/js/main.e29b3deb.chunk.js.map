{"version":3,"sources":["components/AppBar.js","components/StreetViewPhoto.js","components/RestaurantList.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","list","width","fullList","Appbar","classes","className","AppBar","position","Toolbar","Typography","variant","edge","color","aria-label","appBar","marginLeft","flex","Transition","React","forwardRef","props","ref","Slide","direction","StreetViewPhoto","useState","open","setOpen","handleClose","console","log","latitude","longitude","Button","onClick","Dialog","fullScreen","onClose","TransitionComponent","IconButton","restoName","src","alt","maxWidth","backgroundColor","palette","background","paper","inline","display","large","height","profile","wrapper","waiting","marginTop","memo","Details","setDetail","newReviewUserValue","newReviewName","setnewReviewName","newReviewValue","newReview","setnewReview","newReviewRatingValue","newReviewRating","setnewReviewRating","myNewReview","author_name","rating","text","expanded","setExpanded","onNewReviewNameChange","e","target","value","onNewReviewChange","onNewReviewRatingChange","getPlaceDetails","place_id","axios","get","then","res","Detail","data","result","JSON","stringify","Card","Feeds","map","Feed","index","filterRating","key","List","ListItem","alignItems","ListItemText","secondary","Fragment","component","name","substring","vicinity","Rating","precision","defaultValue","size","readOnly","ListItemAvatar","Avatar","icon","CardActions","disableSpacing","clsx","expand","expandOpen","aria-expanded","dropper","Collapse","in","timeout","unmountOnExit","reviews","profile_photo_url","style","primary","relative_time_description","Divider","LinearProgress","noValidate","autoComplete","CardContent","TextField","label","id","placeholder","onChange","multiline","rows","placeID","cloneDetails","parse","push","handleNewReview","geometry","location","lat","lng","containerStyle","container","gridTemplateColumns","gridGap","padding","textAlign","whiteSpace","marginBottom","divider","margin","Main","newRestaurantNameValue","newRestaurantName","setNewRestaurantName","newRatingValue","newRating","setNewRating","newRestaurantAddressValue","newRestaurantAddress","setNewRestaurantAddress","filterRatingValue","setfilterRating","setLongitude","setLatitude","setLng","setLat","newPlace_id","setnewPlace_id","useEffect","navigator","geolocation","getCurrentPosition","coords","error","code","message","watchPosition","setFeeds","newResto","mapClick","latLng","results","center","userCurrentPosition","gutterBottom","Grid","item","xs","Paper","googleMapsApiKey","mapContainerStyle","zoom","aria-labelledby","DialogTitle","DialogContent","DialogContentText","autoFocus","type","fullWidth","DialogActions","uuid","cloneFeeds","path","fillColor","fillOpacity","strokeWeight","scale","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.e29b3deb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport HelpIcon from \"@material-ui/icons/Help\";\r\nimport LocationOnIcon from \"@material-ui/icons/LocationOn\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(0),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  list: {\r\n    width: 250,\r\n  },\r\n  fullList: {\r\n    width: \"auto\",\r\n  },\r\n}));\r\n\r\nexport default function Appbar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <LocationOnIcon />\r\n          <Typography\r\n            variant=\"h6\"\r\n            edge=\"start\"\r\n            className={classes.menuButton}\r\n            color=\"inherit\"\r\n            aria-label=\"menu\"\r\n          >\r\n            Restaurant review\r\n          </Typography>\r\n          <Typography variant=\"h6\" className={classes.title}></Typography>\r\n          <HelpIcon />\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBar: {\r\n    position: \"relative\",\r\n  },\r\n  title: {\r\n    marginLeft: theme.spacing(2),\r\n    flex: 1,\r\n  },\r\n}));\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function StreetViewPhoto(props) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  console.log(\"Props gottten => lat => \" + props.latitude + \" lng => \" + props.longitude);\r\n\r\n  return (\r\n    <div>\r\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n        Street View\r\n      </Button>\r\n      <Dialog\r\n        fullScreen\r\n        open={open}\r\n        onClose={handleClose}\r\n        TransitionComponent={Transition}\r\n      >\r\n        <AppBar className={classes.appBar}>\r\n          <Toolbar>\r\n            <IconButton\r\n              edge=\"start\"\r\n              color=\"inherit\"\r\n              onClick={handleClose}\r\n              aria-label=\"close\"\r\n            >\r\n              <CloseIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              Street view photo of <em>{props.restoName}</em>\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <img\r\n          src={`https://maps.googleapis.com/maps/api/streetview?size=600x625&location=${props.latitude},${props.longitude}&radius=2000&heading=151.78&pitch=-0.76&key=AIzaSyD4p0gchCyP98IGwRwGes-UGx4BDEqDrjU`}\r\n          alt=\"Google Streetview\"\r\n        />\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { useState } from \"react\";\r\n// Improting ratings component\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport clsx from \"clsx\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport StreetViewPhoto from \"./StreetViewPhoto\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    maxWidth: \"36ch\",\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  inline: {\r\n    display: \"inline\",\r\n  },\r\n  large: {\r\n    width: theme.spacing(11),\r\n    height: theme.spacing(11),\r\n    \"margin-top\": \"8px\",\r\n  },\r\n  profile: {\r\n    \"margin-right\": \"-120px !important\",\r\n  },\r\n  wrapper: {\r\n    \"overflow-y\": \"scroll\",\r\n    height: \"525px\",\r\n  },\r\n  waiting: {\r\n    width: \"100%\",\r\n    \"& > * + *\": {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\nfunction ContentFeed(props) {\r\n  const classes = useStyles();\r\n\r\n  //State for details\r\n  const [Details, setDetail] = useState({});\r\n\r\n  // Adding new restaurant name state\r\n  const [newReviewName, setnewReviewName] = useState({\r\n    newReviewUserValue: \"\",\r\n  });\r\n  // Adding new restaurant Review state\r\n  const [newReview, setnewReview] = useState({\r\n    newReviewValue: \"\",\r\n  });\r\n  // Adding new restaurant Review rating state\r\n  const [newReviewRating, setnewReviewRating] = useState({\r\n    newReviewRatingValue: \"\",\r\n  });\r\n\r\n  // My object to be pushed into the array\r\n  const myNewReview = {\r\n    author_name: newReviewName.newReviewUserValue,\r\n    rating: newReviewRating.newReviewRatingValue,\r\n    text: newReview.newReviewValue,\r\n  };\r\n  const [expanded, setExpanded] = React.useState({});\r\n\r\n  //Function to handle adding a new review\r\n  const handleNewReview = (placeID) => {\r\n    console.log(\"Adding a new review with place_id => \" + placeID);\r\n    // If the API returns nothing, i make sure i have a structure in my Details state\r\n    // So i can push to it\r\n    if (Details === void 0 || typeof Details === \"undefined\") {\r\n      setDetail({\r\n        reviews: [],\r\n      });\r\n    }\r\n    let cloneDetails = JSON.parse(JSON.stringify(Details));\r\n    // In case the restaurant has no review\r\n    if (!cloneDetails.reviews) {\r\n      cloneDetails.reviews = []; //I make it an array so i can push to it\r\n    }\r\n    cloneDetails.reviews.push(myNewReview);\r\n    setDetail(cloneDetails);\r\n  };\r\n  // Detecting the name input change\r\n  const onNewReviewNameChange = (e) => {\r\n    setnewReviewName({\r\n      newReviewUserValue: e.target.value,\r\n    });\r\n  };\r\n  // Detecting the review input change\r\n  const onNewReviewChange = (e) => {\r\n    setnewReview({\r\n      newReviewValue: e.target.value,\r\n    });\r\n  };\r\n  // Detecting the new rating input change\r\n  const onNewReviewRatingChange = (e) => {\r\n    setnewReviewRating({\r\n      newReviewRatingValue: e.target.value,\r\n    });\r\n  };\r\n  const handleExpandClick = (place_id) => {\r\n    expanded[place_id] = !expanded[place_id];\r\n    setExpanded(expanded);\r\n    getPlaceDetails(place_id);\r\n  };\r\n  const getPlaceDetails = (place_id) => {\r\n    axios\r\n      .get(\r\n        `https://maps.googleapis.com/maps/api/place/details/json?place_id=${place_id}&fields=name,rating,reviews,formatted_phone_number&key=AIzaSyD4p0gchCyP98IGwRwGes-UGx4BDEqDrjU`\r\n      )\r\n      .then((res) => {\r\n        let Detail = res.data.result;\r\n        console.log(JSON.stringify(res.data.result));\r\n        setDetail(Detail);\r\n        console.log(\"Your Resto ID is => \" + place_id);\r\n        console.log(\"HERE ARE THE DETAILS \" + Detail);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Card className={classes.wrapper}>\r\n        {props.Feeds.map((Feed, index) =>\r\n          Feed.rating <= props.filterRating ? (\r\n            <div key={index}>\r\n              <List className={classes.root}>\r\n                <ListItem alignItems=\"flex-start\">\r\n                  <ListItemText\r\n                    secondary={\r\n                      <React.Fragment>\r\n                        <Typography\r\n                          component=\"span\"\r\n                          variant=\"body2\"\r\n                          className={classes.inline}\r\n                          color=\"textPrimary\"\r\n                        >\r\n                          <span>\r\n                            <h3 key={index}>{Feed.name.substring(0, 35)}</h3>\r\n                            <i key={index}>\r\n                              {Feed.vicinity.substring(0, 40)}...\r\n                            </i>\r\n                            <br />\r\n                          </span>\r\n                        </Typography>\r\n                        <div className=\"wrapper\">\r\n                          <div className={classes.root}>\r\n                            <span key={index}>{Feed.rating}</span>\r\n                            <Rating\r\n                              name=\"half-rating\"\r\n                              precision={0.5}\r\n                              defaultValue={Feed.rating}\r\n                              key={index}\r\n                              size=\"small\"\r\n                              readOnly\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                      </React.Fragment>\r\n                    }\r\n                  />\r\n                  <div className={classes.profile}>\r\n                    <ListItemAvatar>\r\n                      <Avatar\r\n                        className={classes.large}\r\n                        alt={Feed.name}\r\n                        src={Feed.icon}\r\n                        key={index}\r\n                      />\r\n                    </ListItemAvatar>\r\n                  </div>\r\n                </ListItem>\r\n                <CardActions disableSpacing>\r\n                  <IconButton\r\n                    className={clsx(classes.expand, {\r\n                      [classes.expandOpen]: expanded[Feed.place_id],\r\n                    })}\r\n                    onClick={() => handleExpandClick(Feed.place_id)}\r\n                    aria-expanded={expanded[Feed.place_id]}\r\n                    aria-label=\"show more\"\r\n                    key={index}\r\n                  >\r\n                    <ExpandMoreIcon size=\"small\" className={classes.dropper} />\r\n                  </IconButton>\r\n                </CardActions>\r\n                <Collapse\r\n                  in={expanded[Feed.place_id]}\r\n                  timeout=\"auto\"\r\n                  unmountOnExit\r\n                >\r\n                  {Details && Details.reviews ? (\r\n                    Details.reviews.map((Detail, index) => (\r\n                      <List>\r\n                        <ListItem alignItems=\"flex-start\">\r\n                          <ListItemAvatar>\r\n                            <Avatar\r\n                              alt=\"Remy Sharp\"\r\n                              src={Detail.profile_photo_url}\r\n                            />\r\n                          </ListItemAvatar>\r\n                          <ListItemText\r\n                            style={{\r\n                              width: \"60px\",\r\n                              \"word-wrap\": \"anywhere\",\r\n                            }}\r\n                            primary={Detail.author_name}\r\n                            secondary={\r\n                              <React.Fragment>\r\n                                <Typography\r\n                                  component=\"span\"\r\n                                  variant=\"body2\"\r\n                                  className={classes.inline}\r\n                                  color=\"textPrimary\"\r\n                                >\r\n                                  <Rating\r\n                                    name=\"half-rating\"\r\n                                    precision={0.5}\r\n                                    defaultValue={Detail.rating}\r\n                                    size=\"small\"\r\n                                    readOnly\r\n                                  />\r\n                                </Typography>\r\n                                <br />\r\n                                {Detail.text}\r\n                                <br />\r\n                                <em>{Detail.relative_time_description}</em>\r\n                              </React.Fragment>\r\n                            }\r\n                          />\r\n                        </ListItem>\r\n                        <Divider variant=\"inset\" component=\"li\" />\r\n                      </List>\r\n                    ))\r\n                  ) : (\r\n                    <div className={classes.waiting}>\r\n                      <p>No reviews here yet!</p>\r\n                      <LinearProgress />\r\n                    </div>\r\n                  )}\r\n                  <form className={classes.root} noValidate autoComplete=\"off\">\r\n                    <CardContent>\r\n                      <div>\r\n                        <TextField\r\n                          label=\"Username\"\r\n                          id=\"standard-size-small\"\r\n                          placeholder=\"Enter your name\"\r\n                          size=\"small\"\r\n                          value={newReviewName.newReviewUserValue}\r\n                          onChange={onNewReviewNameChange}\r\n                          name=\"userName\"\r\n                        />\r\n                      </div>\r\n                      <br />\r\n                      <div>\r\n                        <Rating\r\n                          name=\"rating\"\r\n                          defaultValue={0}\r\n                          value={newReviewRating.newReviewRatingValue}\r\n                          size=\"small\"\r\n                          onChange={onNewReviewRatingChange}\r\n                        />\r\n                      </div>\r\n                      <div>\r\n                        <TextField\r\n                          label=\"Review\"\r\n                          id=\"filled-size-small\"\r\n                          placeholder=\"Enter your review\"\r\n                          multiline\r\n                          rows={4}\r\n                          size=\"small\"\r\n                          value={newReview.newReviewValue}\r\n                          onChange={onNewReviewChange}\r\n                        />\r\n                      </div>\r\n                      <br />\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={() => handleNewReview(Feed.place_id)}\r\n                        key={index}\r\n                      >\r\n                        Add review\r\n                      </Button>\r\n                      <br />\r\n                      <StreetViewPhoto\r\n                        key={index}\r\n                        restoName={Feed.name}\r\n                        latitude={Feed.geometry.location.lat}\r\n                        longitude={Feed.geometry.location.lng}\r\n                      />\r\n                    </CardContent>\r\n                  </form>\r\n                </Collapse>\r\n                <br />\r\n                <Divider />\r\n              </List>\r\n            </div>\r\n          ) : (\r\n            <span></span>\r\n          )\r\n        )}\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(ContentFeed);\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport ContentFeed from \"./RestaurantList\";\r\n// import drawer from './drawer';\r\nimport { useEffect, useState } from \"react\";\r\nimport { GoogleMap, LoadScript, Marker } from \"@react-google-maps/api\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport axios from \"axios\";\r\nimport uuid from \"react-uuid\";\r\n\r\n//Styling for the map container\r\nconst containerStyle = {\r\n  width: \"auto\",\r\n  height: \"620px\",\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    display: \"grid\",\r\n    gridTemplateColumns: \"repeat(12, 1fr)\",\r\n    gridGap: theme.spacing(3),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(0),\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary,\r\n    whiteSpace: \"nowrap\",\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  divider: {\r\n    margin: theme.spacing(2, 0),\r\n  },\r\n}));\r\n\r\nexport default function Main() {\r\n  const classes = useStyles();\r\n\r\n  // State for newRestaurantName\r\n  const [newRestaurantName, setNewRestaurantName] = useState({\r\n    newRestaurantNameValue: \"\",\r\n  });\r\n  // Detecting the new restaurant name input change\r\n  const onNewRestaurantNameChange = (e) => {\r\n    setNewRestaurantName({\r\n      newRestaurantNameValue: e.target.value,\r\n    });\r\n  };\r\n\r\n  // State for new restaurants rating\r\n  const [newRating, setNewRating] = useState({\r\n    newRatingValue: \"\",\r\n  });\r\n\r\n  // Detecting the new restaurant rating input change\r\n  const onNewRatingChange = (e) => {\r\n    setNewRating({\r\n      newRatingValue: e.target.value,\r\n    });\r\n  };\r\n\r\n  // State for newRestaurantAddress\r\n  const [newRestaurantAddress, setNewRestaurantAddress] = useState({\r\n    newRestaurantAddressValue: \"\",\r\n  });\r\n  // Detecting the new restaurant Address input change\r\n  const onNewRestaurantAddressChange = (e) => {\r\n    setNewRestaurantAddress({\r\n      newRestaurantAddressValue: e.target.value,\r\n    });\r\n  };\r\n\r\n  // Filtering restaurants with rating state\r\n  const [filterRating, setfilterRating] = useState({\r\n    filterRatingValue: \"5\",\r\n  });\r\n\r\n  // Detecting the rating input change\r\n  const onFilterRatingChange = (e) => {\r\n    setfilterRating({\r\n      filterRatingValue: e.target.value,\r\n    });\r\n  };\r\n\r\n  //State for the set lng and lat when getting location\r\n  const [longitude, setLongitude] = useState(0);\r\n  const [latitude, setLatitude] = useState(0);\r\n\r\n  // State for the set lng and lat when user clicks on map\r\n  const [lng, setLng] = useState(0);\r\n  const [lat, setLat] = useState(0);\r\n\r\n  // State to store random place_id generated\r\n  const [newPlace_id, setnewPlace_id] = useState(\"\");\r\n\r\n  //Getting the user's position\r\n  useEffect(() => {\r\n    if (\"geolocation\" in navigator) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        function (position) {\r\n          setLongitude(position.coords.longitude);\r\n          setLatitude(position.coords.latitude);\r\n        },\r\n        function (error) {\r\n          console.error(\"Error Code = \" + error.code + \" - \" + error.message);\r\n        }\r\n      );\r\n      navigator.geolocation.watchPosition(function (position) {\r\n        console.log(\"WatchPosition => Latitude is :\", position.coords.latitude);\r\n        console.log(\r\n          \"WatchPosition => Longitude is :\",\r\n          position.coords.longitude\r\n        );\r\n      });\r\n    } else {\r\n      console.log(\"Not Available\");\r\n    }\r\n  }, []);\r\n\r\n  // Map functions and states below\r\n  // Getting the restaurants to display on map\r\n  const [Feeds, setFeeds] = useState([]);\r\n\r\n  //State to handle modal\r\n  const [open, setOpen] = useState(false);\r\n  //Funtions to hangle Opena and Close of modal\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  // New restaurant info object to be pushed to array Feeds\r\n  const newResto = {\r\n    place_id: newPlace_id,\r\n    name: newRestaurantName.newRestaurantNameValue,\r\n    vicinity: newRestaurantAddress.newRestaurantAddressValue,\r\n    rating: newRating.newRatingValue,\r\n    geometry: {\r\n      location: {\r\n        lat: lat, //lat from the state\r\n        lng: lng, //lng from the state\r\n      },\r\n    },\r\n  };\r\n  // Adding a restaurant event handler\r\n  const handleAddResto = () => {\r\n    setOpen(false);\r\n    let place_id = uuid();\r\n    console.log(\"Restaurant gen =>\" + place_id);\r\n    setnewPlace_id(place_id); //Setting the newPlace_id of my new restaurant\r\n    console.log(\"Newly added resto => \" + newResto);\r\n    newResto.place_id = place_id;\r\n    let cloneFeeds = JSON.parse(JSON.stringify(Feeds));\r\n    cloneFeeds.push(newResto);\r\n    setFeeds(cloneFeeds);\r\n  };\r\n\r\n  const mapClick = (e) => {\r\n    console.log(e.latLng);\r\n    let lat = e.latLng.lat();\r\n    let lng = e.latLng.lng();\r\n\r\n    // Setting the clicked point states\r\n    setLat(lat);\r\n    setLng(lng);\r\n\r\n    handleOpen(); //Calling the modal when the user clicks\r\n    console.log(\r\n      \"You clicked on the coordinates => lng: \" + lng + \" lat:\" + lat\r\n    );\r\n  };\r\n\r\n  //Fetching NearbyPlaces to display marker on the user's location\r\n  useEffect(() => {\r\n    // axios.get(`http://localhost:3000/api/restaurants.json`)\r\n    axios\r\n      .get(\r\n        `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${latitude},${longitude}&radius=2000&type=restaurant&key=AIzaSyD4p0gchCyP98IGwRwGes-UGx4BDEqDrjU`\r\n      )\r\n      .then((res) => {\r\n        let Feeds = res.data.results;\r\n        console.log(Feeds);\r\n        setFeeds(Feeds);\r\n      });\r\n  }, [latitude, longitude]);\r\n\r\n  const center = {\r\n    lat: latitude,\r\n    lng: longitude,\r\n  };\r\n  const userCurrentPosition = {\r\n    lat: latitude,\r\n    lng: longitude,\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Typography variant=\"subtitle1\" gutterBottom></Typography>\r\n      <Grid container spacing={0}>\r\n        <Grid item xs={8}>\r\n          <Paper className={classes.paper}>\r\n            {/* Map */}\r\n            <LoadScript googleMapsApiKey=\"AIzaSyD4p0gchCyP98IGwRwGes-UGx4BDEqDrjU\">\r\n              <GoogleMap\r\n                mapContainerStyle={containerStyle}\r\n                center={center}\r\n                zoom={15}\r\n                onClick={(e) => mapClick(e)}\r\n              >\r\n                {/* Child components, such as markers, info windows, etc. */}\r\n\r\n                <Dialog\r\n                  open={open}\r\n                  onClose={handleClose}\r\n                  aria-labelledby=\"form-dialog-title\"\r\n                >\r\n                  <DialogTitle id=\"form-dialog-title\">\r\n                    Add new restaurant\r\n                  </DialogTitle>\r\n                  <DialogContent>\r\n                    <DialogContentText>\r\n                      Enter restaurant details below\r\n                    </DialogContentText>\r\n                    <TextField\r\n                      autoFocus\r\n                      margin=\"dense\"\r\n                      id=\"name\"\r\n                      label=\"Restaurant name\"\r\n                      type=\"text\"\r\n                      fullWidth\r\n                      value={newRestaurantName.newRestaurantNameValue}\r\n                      onChange={onNewRestaurantNameChange}\r\n                    />\r\n                    <Rating\r\n                      name=\"rating\"\r\n                      defaultValue={0}\r\n                      value={newRating.newRatingValue}\r\n                      onChange={onNewRatingChange}\r\n                    />\r\n                    <TextField\r\n                      margin=\"dense\"\r\n                      id=\"Address\"\r\n                      label=\"Address\"\r\n                      type=\"text\"\r\n                      fullWidth\r\n                      value={newRestaurantAddress.newRestaurantAddressValue}\r\n                      onChange={onNewRestaurantAddressChange}\r\n                    />\r\n                  </DialogContent>\r\n                  <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                      Cancel\r\n                    </Button>\r\n                    <Button onClick={handleAddResto} color=\"primary\">\r\n                      ADD\r\n                    </Button>\r\n                  </DialogActions>\r\n                </Dialog>\r\n\r\n                {/* Displaying a marker on the user's location with the position props */}\r\n                <Marker\r\n                  position={userCurrentPosition}\r\n                  icon={\"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\"}\r\n                />\r\n                {/* Mapping to display the available restaurants around the user's location */}\r\n                {Feeds.map((Feed, index) =>\r\n                  Feed.rating <= filterRating.filterRatingValue ? (\r\n                    <Marker\r\n                      position={{\r\n                        lat: Feed.geometry.location.lat,\r\n                        lng: Feed.geometry.location.lng,\r\n                      }}\r\n                      icon={{\r\n                        path:\r\n                          \"M7 0c-3.314 0-6 3.134-6 7 0 3.31 1.969 6.083 4.616 6.812l-0.993 16.191c-0.067 1.098 0.778 1.996 1.878 1.996h1c1.1 0 1.945-0.898 1.878-1.996l-0.993-16.191c2.646-0.729 4.616-3.502 4.616-6.812 0-3.866-2.686-7-6-7zM27.167 0l-1.667 10h-1.25l-0.833-10h-0.833l-0.833 10h-1.25l-1.667-10h-0.833v13c0 0.552 0.448 1 1 1h2.604l-0.982 16.004c-0.067 1.098 0.778 1.996 1.878 1.996h1c1.1 0 1.945-0.898 1.878-1.996l-0.982-16.004h2.604c0.552 0 1-0.448 1-1v-13h-0.833z\",\r\n                        fillColor: \"#375fc4\",\r\n                        fillOpacity: 1.0,\r\n                        strokeWeight: 0,\r\n                        scale: 1,\r\n                      }}\r\n                    />\r\n                  ) : (\r\n                    <span></span>\r\n                  )\r\n                )}\r\n              </GoogleMap>\r\n            </LoadScript>\r\n            {/* Map End */}\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n          <Paper className={classes.paper}>\r\n            <h3>\r\n              Nearby Places <br />{\" \"}\r\n              <h6>\r\n                Filter Restaurants with ratings less than{\" \"}\r\n                {filterRating.filterRatingValue}\r\n              </h6>\r\n            </h3>\r\n            <Rating\r\n              name=\"half-rating\"\r\n              precision={0.5}\r\n              value={filterRating.filterRatingValue}\r\n              onChange={onFilterRatingChange}\r\n            />\r\n            <ContentFeed\r\n              Feeds={Feeds}\r\n              filterRating={filterRating.filterRatingValue}\r\n            />\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport AppBar from './components/AppBar'\nimport Main from './components/Main'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <AppBar/>\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}